# Use the same base setup as main Dockerfile
ARG RUBY_VERSION=3.4.4
FROM docker.io/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /rails

# Install base packages + cron
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libjemalloc2 libvips sqlite3 cron && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential git libyaml-dev pkg-config && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Final stage for cron image
FROM base

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Run and own only the runtime files as a non-root user for security
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp

# Create crontab file (run as root since cron needs root)
RUN echo "# Routine Tracker Cron Jobs" > /etc/cron.d/routine-tracker && \
    echo "RAILS_ENV=production" >> /etc/cron.d/routine-tracker && \
    echo "BUNDLE_PATH=/usr/local/bundle" >> /etc/cron.d/routine-tracker && \
    echo "*/15 * * * * rails cd /rails && /usr/local/bundle/bin/bundle exec rake reports:send_due >> /var/log/cron.log 2>&1" >> /etc/cron.d/routine-tracker && \
    echo "" >> /etc/cron.d/routine-tracker && \
    chmod 0644 /etc/cron.d/routine-tracker && \
    crontab /etc/cron.d/routine-tracker

# Create log file and set permissions
RUN touch /var/log/cron.log && \
    chown rails:rails /var/log/cron.log

# Entrypoint prepares the database (but don't start server)
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start cron (as root) and tail the log
CMD ["bash", "-c", "cron && tail -f /var/log/cron.log"]
<div class="container">
  <%= render 'shared/main_nav' %>

  <div class="index-header">
    <h1><%= @metric.display_name %></h1>
    <div style="display: flex; gap: 0.5rem;">
      <%= link_to "Edit", edit_metric_path(@metric), class: "btn btn-primary" %>
    </div>
  </div>

  <%= link_to "← Back to Metrics", metrics_path(namespace: @metric.namespace), class: "back-link" %>

  <div class="card">
    <h2>Metric Configuration</h2>
    <p><strong>Function:</strong> <%= @metric.function.capitalize %></p>
    <p><strong>Type:</strong> <%= @metric.type %></p>
    <p><strong>Resolution:</strong> <%= @metric.resolution %></p>
    <p><strong>Width:</strong> <%= @metric.width %></p>
    <% if @metric.wrap.present? %>
      <p><strong>Wrap:</strong> <%= @metric.wrap %></p>
    <% end %>
    
    <% if @metric.function == 'answer' %>
      <% if @metric.scale.present? && @metric.scale != 1.0 %>
        <p><strong>Scale Factor:</strong> <%= @metric.scale %></p>
      <% end %>
      
      <% if @metric.questions.any? %>
        <p><strong>Referenced Questions:</strong></p>
        <ul>
          <% @metric.questions.each do |question| %>
            <li><%= link_to "#{question.name} (#{question.question_type})", question_path(question) %></li>
          <% end %>
        </ul>
      <% end %>
    <% end %>
    
    <% if ['sum', 'average', 'difference', 'count'].include?(@metric.function) && @metric.child_metrics.any? %>
      <% if @metric.function == 'difference' && @metric.first_metric.present? %>
        <p><strong>First Metric (primary):</strong> <%= link_to "#{@metric.first_metric.display_name} - #{@metric.first_metric.function&.capitalize || 'Unknown'} (#{@metric.first_metric.resolution}/#{@metric.first_metric.width})", metric_path(@metric.first_metric) %></p>
        <p><strong>Other Metrics (subtracted from first):</strong></p>
      <% else %>
        <p><strong>Referenced Metrics:</strong></p>
      <% end %>
      <ul>
        <% @metric.child_metrics.each do |child_metric| %>
          <li><%= link_to "#{child_metric.display_name} - #{child_metric.function&.capitalize || 'Unknown'} (#{child_metric.resolution}/#{child_metric.width})", metric_path(child_metric) %></li>
        <% end %>
      </ul>
    <% end %>
    
    <% if @metric.parent_metrics.any? %>
      <p><strong>Used by Metrics:</strong></p>
      <ul>
        <% @metric.parent_metrics.each do |parent_metric| %>
          <li><%= link_to "#{parent_metric.display_name} - #{parent_metric.function&.capitalize || 'Unknown'} (#{parent_metric.resolution}/#{parent_metric.width})", metric_path(parent_metric) %></li>
        <% end %>
      </ul>
    <% end %>
  </div>
  
  <div class="card">
    <h2>Time Series Data</h2>
    
    <% if @series_data.any? %>
      <div class="chart-container" style="margin-bottom: 2rem;">
        <canvas id="metricChart" width="400" height="200"></canvas>
      </div>
      
      <h3>Raw Data</h3>
      <table class="series-table">
        <thead>
          <tr>
            <th>Time</th>
            <th>Value</th>
          </tr>
        </thead>
        <tbody>
          <% @series_data.each do |time, value| %>
            <tr>
              <td>
                <% case @metric.resolution %>
                <% when 'five_minute', 'hour' %>
                  <%= time.strftime("%B %d, %Y %H:%M") %>
                <% when 'day' %>
                  <%= time.strftime("%B %d, %Y") %>
                <% when 'week' %>
                  <%= time.strftime("Week of %B %d, %Y") %>
                <% when 'month' %>
                  <%= time.strftime("%B %Y") %>
                <% end %>
              </td>
              <td><%= value.round(2) %></td>
            </tr>
          <% end %>
        </tbody>
      </table>
    <% else %>
      <p>No data available for this metric configuration.</p>
    <% end %>
  </div>
</div>

<% if @series_data.any? %>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const ctx = document.getElementById('metricChart').getContext('2d');
  
  <% if @metric.wrap.present? && @metric.wrap != 'none' %>
    // For wrapped metrics, use time scale with proper formatting
    <% if @metric.wrap == 'day' %>
      // For day wrap, create data points with time-based x values
      const chartData = <%= raw @series_data.map { |time, value| 
        # Convert to minutes since midnight for proper x-axis positioning
        minutes_since_midnight = time.hour * 60 + time.min
        { x: minutes_since_midnight, y: value.round(2) }
      }.to_json %>;
      
      const chart = new Chart(ctx, {
        type: 'scatter',
        data: {
          datasets: [{
            label: <%= raw "#{@metric.type.capitalize} Value".to_json %>,
            data: chartData,
            backgroundColor: 'rgba(75, 192, 192, 0.6)',
            borderColor: 'rgb(75, 192, 192)',
            pointRadius: 3,
            showLine: false
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: {
              type: 'linear',
              min: 0,
              max: 1440, // 24 * 60 minutes
              title: {
                display: true,
                text: 'Time of Day'
              },
              ticks: {
                stepSize: 60, // Show hour marks
                callback: function(value) {
                  const hours = Math.floor(value / 60);
                  return hours.toString().padStart(2, '0') + ':00';
                }
              }
            },
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Value'
              }
            }
          },
          plugins: {
            title: {
              display: true,
              text: <%= raw "Metric: #{@metric.function.capitalize} Function (Wrapped by #{@metric.wrap})".to_json %>
            }
          }
        }
      });
    <% else %>
      // For other wrap types, use category scale
      const chartData = <%= raw @series_data.map { |time, value| 
        formatted_time = case @metric.wrap
                        when 'hour'
                          time.strftime("%M")
                        when 'weekly'
                          time.strftime("%w-%H:%M")
                        else
                          time.strftime("%H:%M")
                        end
        { x: formatted_time, y: value.round(2) }
      }.to_json %>;
      
      const chart = new Chart(ctx, {
        type: 'scatter',
        data: {
          datasets: [{
            label: <%= raw "#{@metric.type.capitalize} Value".to_json %>,
            data: chartData,
            backgroundColor: 'rgba(75, 192, 192, 0.6)',
            borderColor: 'rgb(75, 192, 192)',
            pointRadius: 3,
            showLine: false
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: {
              type: 'category',
              title: {
                display: true,
                text: <%= raw case @metric.wrap
                             when 'hour'
                               'Minutes (0-59)'
                             when 'weekly'
                               'Day-Time (0=Sun, 6=Sat)'
                             else
                               'Time'
                             end.to_json %>
              }
            },
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Value'
              }
            }
          },
          plugins: {
            title: {
              display: true,
              text: <%= raw "Metric: #{@metric.function.capitalize} Function (Wrapped by #{@metric.wrap})".to_json %>
            }
          }
        }
      });
    <% end %>
  <% else %>
    // For non-wrapped metrics, use regular time formatting
    const chart = new Chart(ctx, {
      type: 'scatter',
      data: {
        datasets: [{
          label: <%= raw "#{@metric.type.capitalize} Value".to_json %>,
          data: <%= raw @series_data.map { |time, value| { x: time.strftime("%m/%d %H:%M"), y: value.round(2) } }.to_json %>,
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
          borderColor: 'rgb(75, 192, 192)',
          pointRadius: 4,
          showLine: false
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: {
            type: 'category',
            title: {
              display: true,
              text: 'Time'
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Value'
            }
          }
        },
        plugins: {
          title: {
            display: true,
            text: <%= raw "Metric: #{@metric.function.capitalize} Function".to_json %>
          }
        }
      }
    });
  <% end %>
</script>
<% end %>
